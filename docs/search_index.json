[
["index.html", "A Little R Book for Lehman Sociology Students Preface", " A Little R Book for Lehman Sociology Students Lehman Sociology 2019-02-11 Preface The ideas is to create a useful book that can be expanded collaboartively Contributors: Elin Waring Created using Minimal Bookdown Book by Sean Kross. https://github.com/seankross/bookdown-start "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction This book is going to be a collection of short, useful documents for students. You are welcome to suggestion additions, corrections, and anything else in the github repository. "],
["statistical-functions-for-one-variable.html", "Chapter 2 Statistical Functions (for one variable) 2.1 These are from core R 2.2 These are from lehmansociology 2.3 These are from the Janitor package 2.4 From the RMisc package (Confidence intervals) 2.5 From the resample package (bootstrap confidence intervals) 2.6 Conclusion", " Chapter 2 Statistical Functions (for one variable) Here are some basic statistical functions you should really know by heart. Most of them are obvious if you think about them. You should also know the formula or other calculation procedures for these. These will be presented using the $ format and some commonly used sample data sets. The na.rm option is included because you are always safer using it. 2.1 These are from core R That means the base and stats packages. # Mean mean(chickwts$weight, na.rm = TRUE) ## [1] 261.3099 # Variance (for a sample) var(chickwts$weight, na.rm = TRUE) ## [1] 6095.503 # Variance (for a population) # There is no simple function for this. The code below shows one possible way # The length() function gives you the total rows and na.omit() ensures that you # are not counting NAs, since they are not in the calculation of var(). var(chickwts$weight, na.rm = TRUE)* (length(na.omit(chickwts$weight)) - 1)/ length(chickwts$weight) ## [1] 6009.65 # Standard deviation (for a sample) sd(chickwts$weight, na.rm = TRUE) ## [1] 78.0737 # Note there is no simple conversion from sample standard deviation # to population standard deviation. # Calculate the population variance and take the square root. See the next # section. # Median median(chickwts$weight, na.rm = TRUE) ## [1] 258 # Quantiles (you specify which ones you want) quantile(chickwts$weight, probs = c(.25, .50, .75), na.rm = TRUE) ## 25% 50% 75% ## 204.5 258.0 323.5 # Minimum min(chickwts$weight, na.rm = TRUE) ## [1] 108 # Maximum max(chickwts$weight, na.rm = TRUE) ## [1] 423 # Table # This is normally used for factor variables table(chickwts$feed, useNA = &quot;ifany&quot;) ## ## casein horsebean linseed meatmeal soybean sunflower ## 12 10 12 11 14 12 Also you should know that the summary() function can be used on almost object and will give you results depending on what that object is. summary(chickwts) ## weight feed ## Min. :108.0 casein :12 ## 1st Qu.:204.5 horsebean:10 ## Median :258.0 linseed :12 ## Mean :261.3 meatmeal :11 ## 3rd Qu.:323.5 soybean :14 ## Max. :423.0 sunflower:12 summary(chickwts$weight) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 108.0 204.5 258.0 261.3 323.5 423.0 summary(chickwts$feed) ## casein horsebean linseed meatmeal soybean sunflower ## 12 10 12 11 14 12 2.2 These are from lehmansociology Since that is a package you either need to load it with library() or use the notation we use here. # MODE # Notice that you must use all upper case. This is because there is # already a function called mode in base r that does something # completely unrelated. lehmansociology::MODE(chickwts$feed) ## $dataframe ## [1] &quot;soybean&quot; # Variance for a population # This is similar to the VARP function in most spreadsheets lehmansociology::varp(chickwts$weight) ## [1] 6009.65 # Standard deviation for a population # This is similar to the STDEVP lehmansociology::sdp(chickwts$weight) ## [1] 77.52194 # Frequency distribution. Read about options in ?frequency lehmansociology::frequency(chickwts$feed) ## Values Freq Percent ## casein 12 16.9 ## horsebean 10 14.1 ## linseed 12 16.9 ## meatmeal 11 15.5 ## soybean 14 19.7 ## sunflower 12 16.9 ## Total 71 100 You can use an the cumulative.percent and/or cumulative.freq options to get cumulative results. # Cumulative frequency table lehmansociology::frequency(warpbreaks$breaks, cumulative.percent = TRUE) ## Values Freq Percent Cum. Percent ## 10 1 1.9 1.9 ## 12 1 1.9 3.8 ## 13 1 1.9 5.7 ## 14 1 1.9 7.6 ## 15 3 5.6 13.2 ## 16 2 3.7 16.9 ## 17 2 3.7 20.6 ## 18 3 5.6 26.2 ## 19 2 3.7 29.9 ## 20 2 3.7 33.6 ## 21 4 7.4 41 ## 24 2 3.7 44.7 ## 25 1 1.9 46.6 ## 26 4 7.4 54 ## 27 1 1.9 55.9 ## 28 3 5.6 61.5 ## 29 4 7.4 68.9 ## 30 2 3.7 72.6 ## 31 1 1.9 74.5 ## 35 1 1.9 76.4 ## 36 2 3.7 80.1 ## 39 2 3.7 83.8 ## 41 1 1.9 85.7 ## 42 1 1.9 87.6 ## 43 1 1.9 89.5 ## 44 1 1.9 91.4 ## 51 1 1.9 93.3 ## 52 1 1.9 95.2 ## 54 1 1.9 97.1 ## 67 1 1.9 99 ## 70 1 1.9 100.9 ## Total 54 100.9 2.3 These are from the Janitor package Since it is a package you must load it as here or use the :: notation. This is a different way to get frequency distributions. For producing single variable frequencies use tabyl(). It is usually used with the %&gt;% or “pipe” operator from the maggritr package. There are no missing values in this data set, but the example below illustrates the option you would use to remove them from the graph. If you don’t include the option any missing values will show. library(janitor) ## Warning: package &#39;janitor&#39; was built under R version 3.4.4 library(magrittr) chickwts %&gt;% tabyl(feed, show_na=FALSE) ## feed n percent ## casein 12 0.1690141 ## horsebean 10 0.1408451 ## linseed 12 0.1690141 ## meatmeal 11 0.1549296 ## soybean 14 0.1971831 ## sunflower 12 0.1690141 Janitor uses adorn_ functions to add extra details or formatting to tables. chickwts %&gt;% tabyl(feed) %&gt;% adorn_pct_formatting() ## feed n percent ## casein 12 16.9% ## horsebean 10 14.1% ## linseed 12 16.9% ## meatmeal 11 15.5% ## soybean 14 19.7% ## sunflower 12 16.9% The lehmansociology package includes extra adorn_ functions for cumulative distributions. library(lehmansociology) chickwts %&gt;% tabyl(weight) %&gt;% adorn_cumulative() %&gt;% adorn_cumulative_percentages() ## weight n percent cum freq cum pct ## 108 1 0.01408451 1 0.01408451 ## 124 1 0.01408451 2 0.02816901 ## 136 1 0.01408451 3 0.04225352 ## 140 1 0.01408451 4 0.05633803 ## 141 1 0.01408451 5 0.07042254 ## 143 1 0.01408451 6 0.08450704 ## 148 1 0.01408451 7 0.09859155 ## 153 1 0.01408451 8 0.11267606 ## 158 1 0.01408451 9 0.12676056 ## 160 1 0.01408451 10 0.14084507 ## 168 1 0.01408451 11 0.15492958 ## 169 1 0.01408451 12 0.16901408 ## 171 1 0.01408451 13 0.18309859 ## 179 1 0.01408451 14 0.19718310 ## 181 1 0.01408451 15 0.21126761 ## 193 1 0.01408451 16 0.22535211 ## 199 1 0.01408451 17 0.23943662 ## 203 1 0.01408451 18 0.25352113 ## 206 1 0.01408451 19 0.26760563 ## 213 1 0.01408451 20 0.28169014 ## 216 1 0.01408451 21 0.29577465 ## 217 1 0.01408451 22 0.30985915 ## 222 1 0.01408451 23 0.32394366 ## 226 1 0.01408451 24 0.33802817 ## 227 1 0.01408451 25 0.35211268 ## 229 1 0.01408451 26 0.36619718 ## 230 1 0.01408451 27 0.38028169 ## 242 1 0.01408451 28 0.39436620 ## 243 1 0.01408451 29 0.40845070 ## 244 1 0.01408451 30 0.42253521 ## 248 2 0.02816901 32 0.45070423 ## 250 1 0.01408451 33 0.46478873 ## 257 2 0.02816901 35 0.49295775 ## 258 1 0.01408451 36 0.50704225 ## 260 2 0.02816901 38 0.53521127 ## 263 1 0.01408451 39 0.54929577 ## 267 1 0.01408451 40 0.56338028 ## 271 2 0.02816901 42 0.59154930 ## 283 1 0.01408451 43 0.60563380 ## 295 1 0.01408451 44 0.61971831 ## 297 1 0.01408451 45 0.63380282 ## 303 1 0.01408451 46 0.64788732 ## 309 1 0.01408451 47 0.66197183 ## 315 1 0.01408451 48 0.67605634 ## 316 1 0.01408451 49 0.69014085 ## 318 2 0.02816901 51 0.71830986 ## 320 1 0.01408451 52 0.73239437 ## 322 1 0.01408451 53 0.74647887 ## 325 1 0.01408451 54 0.76056338 ## 327 1 0.01408451 55 0.77464789 ## 329 1 0.01408451 56 0.78873239 ## 332 1 0.01408451 57 0.80281690 ## 334 1 0.01408451 58 0.81690141 ## 339 1 0.01408451 59 0.83098592 ## 340 1 0.01408451 60 0.84507042 ## 341 1 0.01408451 61 0.85915493 ## 344 1 0.01408451 62 0.87323944 ## 352 1 0.01408451 63 0.88732394 ## 359 1 0.01408451 64 0.90140845 ## 368 1 0.01408451 65 0.91549296 ## 379 1 0.01408451 66 0.92957746 ## 380 1 0.01408451 67 0.94366197 ## 390 1 0.01408451 68 0.95774648 ## 392 1 0.01408451 69 0.97183099 ## 404 1 0.01408451 70 0.98591549 ## 423 1 0.01408451 71 1.00000000 ## Total 71 1.00000000 71 1.00000000 You can add adorn_cum_pct_formatting to put the proportions into percent format. chickwts %&gt;% tabyl(weight) %&gt;% adorn_pct_formatting() %&gt;% adorn_cumulative() %&gt;% adorn_cumulative_percentages() %&gt;% adorn_cum_pct_formatting() ## weight n percent cum freq cum pct ## 1 108 1 1.4% 1 1.408451% ## 2 124 1 1.4% 2 2.8% ## 3 136 1 1.4% 3 4.2% ## 4 140 1 1.4% 4 5.6% ## 5 141 1 1.4% 5 7.0% ## 6 143 1 1.4% 6 8.5% ## 7 148 1 1.4% 7 9.9% ## 8 153 1 1.4% 8 11.3% ## 9 158 1 1.4% 9 12.7% ## 10 160 1 1.4% 10 14.1% ## 11 168 1 1.4% 11 15.5% ## 12 169 1 1.4% 12 16.9% ## 13 171 1 1.4% 13 18.3% ## 14 179 1 1.4% 14 19.7% ## 15 181 1 1.4% 15 21.1% ## 16 193 1 1.4% 16 22.5% ## 17 199 1 1.4% 17 23.9% ## 18 203 1 1.4% 18 25.4% ## 19 206 1 1.4% 19 26.8% ## 20 213 1 1.4% 20 28.2% ## 21 216 1 1.4% 21 29.6% ## 22 217 1 1.4% 22 31.0% ## 23 222 1 1.4% 23 32.4% ## 24 226 1 1.4% 24 33.8% ## 25 227 1 1.4% 25 35.2% ## 26 229 1 1.4% 26 36.6% ## 27 230 1 1.4% 27 38.0% ## 28 242 1 1.4% 28 39.4% ## 29 243 1 1.4% 29 40.8% ## 30 244 1 1.4% 30 42.3% ## 31 248 2 2.8% 32 45.1% ## 32 250 1 1.4% 33 46.5% ## 33 257 2 2.8% 35 49.3% ## 34 258 1 1.4% 36 50.7% ## 35 260 2 2.8% 38 53.5% ## 36 263 1 1.4% 39 54.9% ## 37 267 1 1.4% 40 56.3% ## 38 271 2 2.8% 42 59.2% ## 39 283 1 1.4% 43 60.6% ## 40 295 1 1.4% 44 62.0% ## 41 297 1 1.4% 45 63.4% ## 42 303 1 1.4% 46 64.8% ## 43 309 1 1.4% 47 66.2% ## 44 315 1 1.4% 48 67.6% ## 45 316 1 1.4% 49 69.0% ## 46 318 2 2.8% 51 71.8% ## 47 320 1 1.4% 52 73.2% ## 48 322 1 1.4% 53 74.6% ## 49 325 1 1.4% 54 76.1% ## 50 327 1 1.4% 55 77.5% ## 51 329 1 1.4% 56 78.9% ## 52 332 1 1.4% 57 80.3% ## 53 334 1 1.4% 58 81.7% ## 54 339 1 1.4% 59 83.1% ## 55 340 1 1.4% 60 84.5% ## 56 341 1 1.4% 61 85.9% ## 57 344 1 1.4% 62 87.3% ## 58 352 1 1.4% 63 88.7% ## 59 359 1 1.4% 64 90.1% ## 60 368 1 1.4% 65 91.5% ## 61 379 1 1.4% 66 93.0% ## 62 380 1 1.4% 67 94.4% ## 63 390 1 1.4% 68 95.8% ## 64 392 1 1.4% 69 97.2% ## 65 404 1 1.4% 70 98.6% ## 66 423 1 1.4% 71 100.0% ## 67 Total 71 - 71 100.0% Piping to the knitr::kable() function will create a more polished table, In additon if knit to PDF kable() can add a title using the caption= option. chickwts %&gt;% tabyl(weight) %&gt;% adorn_pct_formatting() %&gt;% adorn_cumulative() %&gt;% adorn_cumulative_percentages() %&gt;% adorn_cum_pct_formatting() %&gt;% knitr::kable(caption = &quot;Weights of chicks&quot;) Table 2.1: Weights of chicks weight n percent cum freq cum pct 108 1 1.4% 1 1.408451% 124 1 1.4% 2 2.8% 136 1 1.4% 3 4.2% 140 1 1.4% 4 5.6% 141 1 1.4% 5 7.0% 143 1 1.4% 6 8.5% 148 1 1.4% 7 9.9% 153 1 1.4% 8 11.3% 158 1 1.4% 9 12.7% 160 1 1.4% 10 14.1% 168 1 1.4% 11 15.5% 169 1 1.4% 12 16.9% 171 1 1.4% 13 18.3% 179 1 1.4% 14 19.7% 181 1 1.4% 15 21.1% 193 1 1.4% 16 22.5% 199 1 1.4% 17 23.9% 203 1 1.4% 18 25.4% 206 1 1.4% 19 26.8% 213 1 1.4% 20 28.2% 216 1 1.4% 21 29.6% 217 1 1.4% 22 31.0% 222 1 1.4% 23 32.4% 226 1 1.4% 24 33.8% 227 1 1.4% 25 35.2% 229 1 1.4% 26 36.6% 230 1 1.4% 27 38.0% 242 1 1.4% 28 39.4% 243 1 1.4% 29 40.8% 244 1 1.4% 30 42.3% 248 2 2.8% 32 45.1% 250 1 1.4% 33 46.5% 257 2 2.8% 35 49.3% 258 1 1.4% 36 50.7% 260 2 2.8% 38 53.5% 263 1 1.4% 39 54.9% 267 1 1.4% 40 56.3% 271 2 2.8% 42 59.2% 283 1 1.4% 43 60.6% 295 1 1.4% 44 62.0% 297 1 1.4% 45 63.4% 303 1 1.4% 46 64.8% 309 1 1.4% 47 66.2% 315 1 1.4% 48 67.6% 316 1 1.4% 49 69.0% 318 2 2.8% 51 71.8% 320 1 1.4% 52 73.2% 322 1 1.4% 53 74.6% 325 1 1.4% 54 76.1% 327 1 1.4% 55 77.5% 329 1 1.4% 56 78.9% 332 1 1.4% 57 80.3% 334 1 1.4% 58 81.7% 339 1 1.4% 59 83.1% 340 1 1.4% 60 84.5% 341 1 1.4% 61 85.9% 344 1 1.4% 62 87.3% 352 1 1.4% 63 88.7% 359 1 1.4% 64 90.1% 368 1 1.4% 65 91.5% 379 1 1.4% 66 93.0% 380 1 1.4% 67 94.4% 390 1 1.4% 68 95.8% 392 1 1.4% 69 97.2% 404 1 1.4% 70 98.6% 423 1 1.4% 71 100.0% Total 71 - 71 100.0% Janitor is also used to create cross tabs (see Chapter 5). 2.4 From the RMisc package (Confidence intervals) You can use the CI() function from the Rmisc package to obtain confidence intervals. library(Rmisc) CI(chickwts$weight, ci = 0.95) ## upper mean lower ## 279.7896 261.3099 242.8301 2.5 From the resample package (bootstrap confidence intervals) Obtaining bootstrap confidence intervals for a single mean would build on the bootstrap() function from the resample library. It takes two steps. First obtaining a large number of samples from your sample. You also have to specify what statistic you want to estimate the confidence interval for. This can be anything (mean(), median(), sd() or even a function you create). You can also specify the number of replications; with today’s computer power there is no reason to use a low number unless you have a huge (100,000s) sample size. Save the result in an object and then use the CI.bca() function to obtain the level of confidence interval you want. There are also other CI methods available. library(resample) bootstrap_results &lt;- bootstrap(chickwts, mean(weight, na.rm = TRUE), R = 10000) CI.bca(bootstrap_results, probs = c(0.025, 0.975)) ## 2.5% 97.5% ## mean(weight, na.rm = TRUE) 242.7296 279.6218 2.6 Conclusion This chapter presents just a handful of R functions and their many options As you gain experience using R you should read the help files, vignettes and online resources to learn more. "],
["code.html", "Chapter 3 Code 3.1 Assignment operator 3.2 Combine function 3.3 Pipe operator 3.4 Basic math operations 3.5 Comparison operators 3.6 AND and OR (logical operators)", " Chapter 3 Code This chapter is going to review some basic code items that come up regularly. You should memorize these. 3.1 Assignment operator &lt;- This is used to assign the value of whatever is on the right to the object on the left. a &lt;- 4 Means that a is now 4. b &lt;- chickwts Means that b is now a data frame with all the data from chickwts. 3.2 Combine function c() This essential function lets you put a set of values into a vector. a &lt;- c(2, 3, 4, 5) b &lt;- c(&quot;red&quot;, &quot;yellow&quot;, &quot;blue&quot;) c &lt;- c(TRUE, FALSE, FALSE, TRUE) Now a, b, and c refer to these sets of values. 3.3 Pipe operator This is not part of the core of R, but it is widely used. It comes from the magrittr package. %&gt;% The way it works is that everything on the left becomes an input to what is done on the right. This is supposed to be more like natural writing. First do this, then do this, then do this. The code below says: take the chickwts data, group the rows by the feed variable, then get the mean weight for each of the feed types. library(magrittr) chickwts %&gt;% dplyr::group_by(feed) %&gt;% dplyr::summarize( mean=mean(weight)) ## # A tibble: 6 x 2 ## feed mean ## &lt;fct&gt; &lt;dbl&gt; ## 1 casein 324. ## 2 horsebean 160. ## 3 linseed 219. ## 4 meatmeal 277. ## 5 soybean 246. ## 6 sunflower 329. Not all functions work with piped data. 3.4 Basic math operations Name Operator Example Result Addition + 3 + 4 7 Subtraction - 4-3 1 Multiplication * 3*4 12 Division / 3/4 0.75 Raise to power ^ 3^4 81 3.5 Comparison operators Name Operator Example Result Equal to == (2+3) == (3+3) FALSE Not equal to != (2+3) == (3+3) FALSE Greater than &gt; 5 &gt;2 TRUE Less than &lt; 5 &lt; 2 FALSE Greater than or equal to &gt;= 2 &gt;= 2 TRUE Less than or equal to &lt;= 2 &lt;= 3 TRUE 3.6 AND and OR (logical operators) As you start to do more complex things with recoding variables you will often want to use two or more statements in combination. For example you may want to identify everyone 18 or over but who are also 65 or under. For these we use the logical operators. The first set of examples are very simple. Name Operator Meaning Example Result OR | At least one statement is true 7 == 6+1 | 7 == 8-1 TRUE OR | At least one statement is true 7 == 6+1 | 7 == 8+1 TRUE Exclusive OR xor(x,y) Exactly one statement is true xor(7 == 6+1, 7 == 8-1) FALSE Exclusive OR xor(x,y) Exactly one statement is true xor(7 == 6+1, 7 == 8+1) TRUE AND &amp; All statements are true 7 == 6+1 &amp; 7 == 8-1 TRUE AND &amp; All statements are true 7 == 6+1 &amp; 7 == 8+1 FALSE If you know any other computer languages be aware that | and &amp; and || and &amp;&amp; work differently in R than you might expect. "],
["errors.html", "Chapter 4 Errors 4.1 Could not find function 4.2 Problems with variables 4.3 Problems with markdown 4.4 Other problems when knittng", " Chapter 4 Errors This chapter is going to describe some commone error messages and how to solve them. 4.1 Could not find function Common causes # Use upper case when you should use lower case or lower case # when you should use upper case Mean(chickwts$weight) Error in Mean(chickwts$weight) : could not find function “Mean” # Wrong spelling men(chickwts$weight) Error in men(chickwts$weight) : could not find function “men” Correct code for all of the above mean(chickwts$weight) ## [1] 261.3099 # Need to load library (MODE() is from lehmansociology) MODE(chickwts$feed) Error in MODE(chickwts$feed) : could not find function “MODE” Correct code lehmansociology::MODE(chickwts$feed) ## $dataframe ## [1] &quot;soybean&quot; 4.2 Problems with variables Error message: argument is not numeric or logical: returning NA[1] NA All of the examples below give the same message. # Misspelled variable name mean(chickwts$wieght) # Left out the variable name (only gave name of the data frame) mean(chickwts) # Tried to calculate a mean on a factor (nominal or categorical variable) mean(chickwts$feed) 4.3 Problems with markdown Error Message: Error: unexpected symbol in “Started writing” Started writing inside the tick marks Text goes outside the tick marks, code goes inside the tick marks. If you want text inside the tick marks in order to comment your code, start the line with a #. Correct code # Started writing inside the tick marks Error: Error in parse(text = x, srcfile = src) : attempt to use zero-length variable name Calls: local … evaluate -&gt; parse_all -&gt; parse_all.character -&gt; parse This means you have something wrong with your tick marks around the code chunk. (In the example below the tick marks are in quotation marks so they will show. Do not use quotation marks in your markdown in this way. ) &#39;```{r}&#39; # Differet number of tick marks mean(chickwts$weight) &#39;``&#39; `` Error: Nothing happens. Code does not run. Code is outside of tick marks mean(chickwts$weight) 4.4 Other problems when knittng Error: Package inputenc Error: Unicode char This usually means you have a non-standard character in your text. It happens because you copy and pasted into the file from another document and something went wrong with the paste. The error message will tell you the character that is causing the problem. You should search your document for that character. "],
["statistics-for-multiple-variables.html", "Chapter 5 Statistics for Multiple Variables 5.1 Using formula notation 5.2 Using group_by 5.3 Entry of variables", " Chapter 5 Statistics for Multiple Variables Most of the time we want to look at the relationship between two or more variables. R has several different ways of working with multiple variables. 5.1 Using formula notation In R a “forumula” is created using the ~ operator, which is found on the top left of the keyboard. In these examples the formula operator always works like this: dependent_variable ~ independent_variable and if you have multiple independent_variables use a + to add them on the right. One way to do crosstabs, also known as contingency tables, that uses the formula notation is to use the crosstab function from lehmansociology. This gives you the number of observations in each combination of the variables. lehmansociology::crosstab(cyl ~ gear, data = mtcars, title = &quot;Cylinders by number of gears&quot;) ## Cylinders by number of gears ## 3 4 5 ## 4 1 8 2 ## 6 2 4 1 ## 8 12 0 2 ## Total N 15 12 5 lehmansociology::crosstab(cyl ~ gear, data = mtcars, title = &quot;Cylinders by number of gears&quot;, format = &quot;column_percent&quot;) ## Cylinders by number of gears ## 3 4 5 ## 4 6.7 66.7 40 ## 6 13.3 33.3 20 ## 8 80 0 40 ## Total N 15 12 5 (You can also use the Janitor tabyl function to make cross tabs, this is explained in the next section.) library(Rmisc) group.CI(weight ~ feed, data = chickwts, ci = .90) ## feed weight.upper weight.mean weight.lower ## 1 casein 356.9876 323.5833 290.1791 ## 2 horsebean 182.5907 160.2000 137.8093 ## 3 linseed 245.8304 218.7500 191.6696 ## 4 meatmeal 312.3758 276.9091 241.4424 ## 5 soybean 272.0480 246.4286 220.8092 ## 6 sunflower 354.2348 328.9167 303.5986 You can also use the formula notation for a model with no independent variable by substituting a constant on the right side. group.CI(weight ~ 1, data = chickwts, ci = .90) ## weight.upper weight.mean weight.lower ## 1 276.7549 261.3099 245.8648 5.1.1 Ordinary Linear Model (This means it has an interval dependent variable.) This works in the same way as group.CI, dependent variable on the left, independent on the right. lm(raises ~ critical, data = attitude) ## ## Call: ## lm(formula = raises ~ critical, data = attitude) ## ## Coefficients: ## (Intercept) critical ## 35.025 0.396 5.1.2 Generalized Linear Model (In this case a logistic regression.) (in this code a dichtomous dependent variable is created using the cut() functions.) USJudgeRatings$RTEN_d &lt;- cut(USJudgeRatings$RTEN, median(USJudgeRatings$RTEN)) glm(RTEN_d ~ INTG, data = USJudgeRatings, family = binomial()) ## ## Call: glm(formula = RTEN_d ~ INTG, family = binomial(), data = USJudgeRatings) ## ## Coefficients: ## (Intercept) INTG ## -29.387 4.325 ## ## Degrees of Freedom: 42 Total (i.e. Null); 41 Residual ## Null Deviance: 26.62 ## Residual Deviance: 8.603 AIC: 12.6 5.1.3 Parametric t test t.test(extra ~ group, data = sleep) ## ## Welch Two Sample t-test ## ## data: extra by group ## t = -1.8608, df = 17.776, p-value = 0.07939 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.3654832 0.2054832 ## sample estimates: ## mean in group 1 mean in group 2 ## 0.75 2.33 5.2 Using group_by Another way to look at the relationship between variables is to compare values of statistics for different groups. In this case one way to do this is with the group_by function from the dplyr package. Once you group your data there are a number of other functions within dplyr and in other packages that will use the groups to organize the results library(magrittr) iris %&gt;% dplyr::group_by(Species) %&gt;% dplyr::summarize(mean_sepal_length = mean(Sepal.Length), median_sepal_legth = median(Sepal.Length), Upper_CI = mean(Sepal.Length) + 1.96*sd(Sepal.Length), Lower_CI = mean(Sepal.Length) - 1.96*sd(Sepal.Length) ) ## # A tibble: 3 x 5 ## Species mean_sepal_length median_sepal_legth Upper_CI Lower_CI ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.01 5 5.70 4.32 ## 2 versicolor 5.94 5.9 6.95 4.92 ## 3 virginica 6.59 6.5 7.83 5.34 iris %&gt;% dplyr::group_by(Species) %&gt;% skimr::skim() Table 5.1: Data summary Number of rows 150 Number of columns 5 Name Piped data Column type frequency numeric 4 Group variables Species Variable type: numeric skim_variable Species missing complete n mean sd p0 p25 p50 p75 p100 hist Sepal.Length setosa 0 50 50 5.01 0.35 4.3 4.80 5.00 5.20 5.8 ▃▃▇▅▁ Sepal.Length versicolor 0 50 50 5.94 0.52 4.9 5.60 5.90 6.30 7.0 ▂▇▆▃▃ Sepal.Length virginica 0 50 50 6.59 0.64 4.9 6.23 6.50 6.90 7.9 ▁▃▇▃▂ Sepal.Width setosa 0 50 50 3.43 0.38 2.3 3.20 3.40 3.68 4.4 ▁▃▇▅▂ Sepal.Width versicolor 0 50 50 2.77 0.31 2.0 2.52 2.80 3.00 3.4 ▁▅▆▇▂ Sepal.Width virginica 0 50 50 2.97 0.32 2.2 2.80 3.00 3.18 3.8 ▂▆▇▅▁ Petal.Length setosa 0 50 50 1.46 0.17 1.0 1.40 1.50 1.58 1.9 ▁▃▇▃▁ Petal.Length versicolor 0 50 50 4.26 0.47 3.0 4.00 4.35 4.60 5.1 ▂▂▇▇▆ Petal.Length virginica 0 50 50 5.55 0.55 4.5 5.10 5.55 5.88 6.9 ▃▇▇▃▂ Petal.Width setosa 0 50 50 0.25 0.11 0.1 0.20 0.20 0.30 0.6 ▇▂▂▁▁ Petal.Width versicolor 0 50 50 1.33 0.20 1.0 1.20 1.30 1.50 1.8 ▅▇▃▆▁ Petal.Width virginica 0 50 50 2.03 0.27 1.4 1.80 2.00 2.30 2.5 ▂▇▆▅▇ 5.3 Entry of variables Many R functions for multiple variables simply require that you enter the names of variables in the correct order. Sometimes the names will need to be in quotation marks &quot;name&quot; and sometimes not. 5.3.1 Cross tabs To do a cross tab (also known as two-way table or contingency table) we also use tabyl(). The basic function just gives counts for each combination. The first variable defines the rows and the second variable defines the columns. library(magrittr) library(janitor) ## Warning: package &#39;janitor&#39; was built under R version 3.4.4 mtcars %&gt;% tabyl(cyl, gear, show_na = FALSE) ## cyl 3 4 5 ## 4 1 8 2 ## 6 2 4 1 ## 8 12 0 2 Piping to `adorn_title() will add the name of the second variable. mtcars %&gt;% tabyl(cyl, gear) %&gt;% adorn_title() ## gear ## cyl 3 4 5 ## 4 1 8 2 ## 6 2 4 1 ## 8 12 0 2 To change to proportions use the adorn_percentages() functions. In sociology we use the independent variable for the columns and the dependent variable for the rows. Therefore we use the column total for the denominator adorn_percentages(denominator = &quot;col&quot;). Sometimes you might want to calculate row or total percents, in which case the denominator would be “row” or “all”. mtcars %&gt;% tabyl(cyl, gear) %&gt;% adorn_percentages(denominator = &quot;col&quot;) %&gt;% adorn_title() ## gear ## cyl 3 4 5 ## 4 0.0666666666666667 0.666666666666667 0.4 ## 6 0.133333333333333 0.333333333333333 0.2 ## 8 0.8 0 0.4 To change the formatting to percentages pipe to the adorn_pct_formatting() function. mtcars %&gt;% tabyl(cyl, gear) %&gt;% adorn_percentages(denominator = &quot;col&quot;) %&gt;% adorn_pct_formatting() %&gt;% adorn_ns() %&gt;% adorn_title() ## gear ## cyl 3 4 5 ## 4 6.7% (1) 66.7% (8) 40.0% (2) ## 6 13.3% (2) 33.3% (4) 20.0% (1) ## 8 80.0% (12) 0.0% (0) 40.0% (2) You can also display both the numbers and the percentages. mtcars %&gt;% tabyl(cyl, gear) %&gt;% adorn_percentages(denominator = &quot;col&quot;) %&gt;% adorn_pct_formatting() %&gt;% adorn_ns() %&gt;% adorn_title() ## gear ## cyl 3 4 5 ## 4 6.7% (1) 66.7% (8) 40.0% (2) ## 6 13.3% (2) 33.3% (4) 20.0% (1) ## 8 80.0% (12) 0.0% (0) 40.0% (2) Adding a third variable will create separate tables for level of that variable. mtcars %&gt;% tabyl(cyl, gear, am) %&gt;% adorn_percentages(denominator = &quot;col&quot;) %&gt;% adorn_pct_formatting() %&gt;% adorn_title() ## $`0` ## gear ## cyl 3 4 5 ## 4 6.7% 50.0% - ## 6 13.3% 50.0% - ## 8 80.0% 0.0% - ## ## $`1` ## gear ## cyl 3 4 5 ## 4 - 75.0% 40.0% ## 6 - 25.0% 20.0% ## 8 - 0.0% 40.0% You can also pipe to the knitr::kable() function to get a more polished table (see Chapter 2) "],
["graphs.html", "Chapter 6 Graphs 6.1 How ggplot works 6.2 Common problems", " Chapter 6 Graphs In our classes we primarily use the ggplot2 package for graphing. Remember that you will need to load the package library(ggplot2). As a package is is very flexible and provides many options that will let you do just about any visualization, but this can make it seem complicated when you are starting out learning it. 6.1 How ggplot works Ggplot constructs a graph by building it up piece by piece, with the parts connected with + signs. 6.1.1 ggplot() A ggplot always starts with the ggplot() function. This provides the name of the data set and sets up the background of your graph. Next one or more aes() functions define the x variable and the y variable (if needed). Notice how the three axes below differ depending on how many variables there are and what kind of variable they are. The aes() which is short for aesthetics. library(ggplot2) ggplot(iris) ggplot(iris) + aes(x = Sepal.Length) ggplot(iris) + aes(x = Sepal.Length) + aes(y = Sepal.Width) ggplot(iris) + aes(x = Species) + aes( y = Sepal.Width) 6.1.2 Adding geom To add data to the axes you use a “geom” that determines the type of display. The geom does not modify the axis, it adds data to it. To show this, let’s save the ggplot information and add to it. Our first example is only for one variable. Often, you will want to add options such as binwidth. The last example shows how to use a slightly different approach to graph the cumulative distribution (ecdf). graph1 &lt;- ggplot(iris) + aes(x = Sepal.Length) graph1 + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. graph1 + geom_dotplot(binwidth = .1) graph1 + geom_bar() graph1 + geom_density() graph1 + stat_ecdf(geom = &quot;step&quot;) Our second example uses two interval variables, so has different possibilities than the first. The second one shows one way that geoms can be combined. graph2 &lt;- ggplot(iris) + aes(x = Sepal.Length) + aes(y = Sepal.Width) graph2 + geom_point() graph2 + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; graph2_with_species &lt;- ggplot(iris) + aes(x = Sepal.Length) + aes(y = Sepal.Width) + aes(color = Species) + geom_point() graph2_with_species This data includes two types of data. The last example shows how multiple geoms can be combined. graph3 &lt;- ggplot(iris) + aes(x = Species) + aes(y = Sepal.Width) graph3 + geom_point() graph3 + geom_count() graph3 + geom_jitter() graph3 + geom_boxplot() graph3 + geom_boxplot() + geom_jitter() 6.1.3 Add titles and labels, modify axes There are many additional options that you can use. This document will just show how to add a title and labels and modify axes. graph3 + geom_jitter() + ggtitle(&quot;Sepal Width by Species in the Iris Data&quot;) + labs(y=&quot;Sepal Width&quot;, x=&quot;Iris Species&quot;) The way to modify axes is to use scale_y_continuous and scale_x_continuous. These are very flexible and have many options. This section will show how to change or improve some of the previous plots. # Remove irrelevant y axis values graph1 + geom_dotplot(binwidth = .1) + scale_y_continuous(NULL, breaks = NULL) # Use the same tick marks on the x axis match those on the y axis graph2 + geom_point() + scale_x_continuous( breaks = seq(4, 8, .5), minor_breaks = waiver()) There are several websites that give detailed examples of more complex ways to create visualizations. 6.2 Common problems Some of the most common problems in ggplot are the same as any other code in R, misspelling names, using the wrong graph for your data type, or having a problem with your tick marks. Here are some errors that you are most likely to see when using ggplot. 6.2.1 unexpected symbol This happens when you forget to put a + between the different parts of your plot. graph3 geom_jitter() Error: unexpected symbol in &quot;graph3 geom_jitter&quot; 6.2.2 invalid argument to unary operator This happens if you have an extra +. graph3 + + geom_jitter() Error in +geom_jitter() : invalid argument to unary operator 6.2.3 Error: unexpected ‘)’ This happens if you have an extra closing parenthesis. graph2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width))) Error: unexpected &#39;)&#39; in &quot;graph2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)))&quot; "],
["other.html", "Chapter 7 Other", " Chapter 7 Other This chapter will have additional material. "]
]
