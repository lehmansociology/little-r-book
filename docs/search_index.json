[
["index.html", "A Little R Book for Lehman Sociology Students Preface", " A Little R Book for Lehman Sociology Students Lehman Sociology 2017-10-19 Preface The ideas is to create a useful book that can be expanded collaboartively Contributors: Elin Waring Created using Minimal Bookdown Book by Sean Kross. https://github.com/seankross/bookdown-start "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction This book is going to be a collection of short, useful documents for students. You are welcome to suggestion additions, corrections, and anything else in the github repository. "],
["statistical-functions-for-one-variable.html", "Chapter 2 Statistical Functions (for one variable) 2.1 These are from core R 2.2 These are from lehmansociology", " Chapter 2 Statistical Functions (for one variable) Here are some basic statistical functions you should really know by heart. Most of them are obvious if you think about them. You should also know the formula or other calculation procedures for these. These will be presented using the $ format and some commonly used sample data sets. The na.rm option is included because you are always safer using it. 2.1 These are from core R That means the base and stats packages. # Mean mean(chickwts$weight, na.rm = TRUE) ## [1] 261.3099 # Variance (for a sample) var(chickwts$weight, na.rm = TRUE) ## [1] 6095.503 # Variance (for a population) # There is no simple function for this. The code below shows one possible way # The length() function gives you the total rows and na.omit() ensures that you are not counting NAs, since # they are not in the calculation of var(). var(chickwts$weight, na.rm = TRUE)*(length(na.omit(chickwts$weight)/(length(na.omit(chickwts$weight)) - 1))) ## [1] 432780.7 # Standard deviation (for a sample) sd(chickwts$weight, na.rm = TRUE) ## [1] 78.0737 # Note there is no simple conversion from sample standard deviation # to population standard deviation. # Calculate the population variance and take the square root. # Median median(chickwts$weight, na.rm = TRUE) ## [1] 258 # Quantiles (you specify which ones you want) quantile(chickwts$weight, probs = c(.25, .50, .75), na.rm = TRUE) ## 25% 50% 75% ## 204.5 258.0 323.5 # Minimum min(chickwts$weight, na.rm = TRUE) ## [1] 108 # Maximum max(chickwts$weight, na.rm = TRUE) ## [1] 423 # Table # This is normally used for factor variables table(chickwts$feed, useNA = &quot;ifany&quot;) ## ## casein horsebean linseed meatmeal soybean sunflower ## 12 10 12 11 14 12 Also you should know that the summary() function can be used on almost object and will give you results depending on what that object is. summary(chickwts) ## weight feed ## Min. :108.0 casein :12 ## 1st Qu.:204.5 horsebean:10 ## Median :258.0 linseed :12 ## Mean :261.3 meatmeal :11 ## 3rd Qu.:323.5 soybean :14 ## Max. :423.0 sunflower:12 summary(chickwts$weight) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 108.0 204.5 258.0 261.3 323.5 423.0 summary(chickwts$feed) ## casein horsebean linseed meatmeal soybean sunflower ## 12 10 12 11 14 12 2.2 These are from lehmansociology Since that is a package you either need to load it with library() or use the notation we use here. # Mode lehmansociology::MODE(chickwts$feed) ## $dataframe ## [1] &quot;soybean&quot; # Frequency lehmansociology::frequency(chickwts$feed) ## Values Freq Percent ## casein 12 16.9 ## horsebean 10 14.1 ## linseed 12 16.9 ## meatmeal 11 15.5 ## soybean 14 19.7 ## sunflower 12 16.9 ## Total 71 100 "],
["code.html", "Chapter 3 Code 3.1 Assignment operator 3.2 Combine function 3.3 Pipe operator 3.4 Basic math operations 3.5 Comparison operators 3.6 AND and OR (logical operators)", " Chapter 3 Code This chapter is going to review some basic code items that come up regularly. You should memorize these. 3.1 Assignment operator &lt;- This is used to assign the value of whatever is on the right to the object on the left. a &lt;- 4 Means that a is now 4. b &lt;- chickwts Means that b is now a data frame with all the data from chickwts. 3.2 Combine function c() This essential function lets you put a set of values into a vector. a &lt;- c(2, 3, 4, 5) b &lt;- c(&quot;red&quot;, &quot;yellow&quot;, &quot;blue&quot;) c &lt;- c(TRUE, FALSE, FALSE, TRUE) Now a, b, and c refer to these sets of values. 3.3 Pipe operator This is not part of the core of R, but it is widely used. It comes from the magrittr package. %&gt;% The way it works is that everything on the left becomes and input to what is done on the right. This is supposed to be more like natural writing. The code below says: take the chickwts data, group the rows by the feed variable, then get the mean weight for each of the feed types. library(magrittr) chickwts %&gt;% dplyr::group_by(feed) %&gt;% dplyr::summarize( mean=mean(weight)) ## # A tibble: 6 x 2 ## feed mean ## &lt;fctr&gt; &lt;dbl&gt; ## 1 casein 323.5833 ## 2 horsebean 160.2000 ## 3 linseed 218.7500 ## 4 meatmeal 276.9091 ## 5 soybean 246.4286 ## 6 sunflower 328.9167 Not all functions work with piped data. 3.4 Basic math operations Name Operator Example Result Addition + 3 + 4 7 Subtraction - 4-3 1 Multiplication * 3*4 12 Division / 3/4 0.75 Raise to power ^ 3^4 81 3.5 Comparison operators Name Operator Example Result Equal to == (2+3) == (3+3) FALSE Not equal to != (2+3) == (3+3) FALSE Greater than &gt; 5 &gt;2 TRUE Less than &lt; 5 &lt; 2 FALSE Greater than or equal to &gt;= 2 &gt;= 2 TRUE Less than or equal to &lt;= 2 &lt;= 3 TRUE 3.6 AND and OR (logical operators) As you start to do more complex things with recoding variables you will often want to use two or more statements in combination. For example you may want to identify everyone 18 or over but who are also 65 or under. For these we use the logical operators. The first set of examples are very simple. Name Operator Meaning Example Result OR | At least one statement is true 7 == 6+1 | 7 == 8-1 TRUE OR | At least one statement is true 7 == 6+1 | 7 == 8+1 TRUE Exclusive OR xor(x,y) Exactly one statement is true xor(7 == 6+1, 7 == 8-1) FALSE Exclusive OR xor(x,y) Exactly one statement is true xor(7 == 6+1, 7 == 8+1) TRUE AND &amp; All statements are true 7 == 6+1 &amp; 7 == 8-1 TRUE AND &amp; All statements are true 7 == 6+1 &amp; 7 == 8+1 FALSE If you know any other computer languages be aware that | and &amp; and || and &amp;&amp; work differently in R than you might expect. "],
["errors.html", "Chapter 4 Errors 4.1 Could not find function 4.2 Problems with variables 4.3 Problems with markdown 4.4 Other problems when knittng", " Chapter 4 Errors This chapter is going to describe some commone error messages and how to solve them. 4.1 Could not find function Common causes # Use upper case when you should use lower case or lower case # when you should use upper case Mean(chickwts$weight) Error in Mean(chickwts$weight) : could not find function “Mean” # Wrong spelling men(chickwts$weight) Error in men(chickwts$weight) : could not find function “men” Correct code for all of the above mean(chickwts$weight) ## [1] 261.3099 # Need to load library (MODE() is from lehmansociology) MODE(chickwts$feed) Error in MODE(chickwts$feed) : could not find function “MODE” Correct code lehmansociology::MODE(chickwts$feed) ## $dataframe ## [1] &quot;soybean&quot; 4.2 Problems with variables Error message: argument is not numeric or logical: returning NA[1] NA All of the examples below give the same message. # Misspelled variable name mean(chickwts$wieght) # Left out the variable name (only gave name of the data frame) mean(chickwts) # Tried to calculate a mean on a factor (nominal or categorical variable) mean(chickwts$feed) 4.3 Problems with markdown Error Message: Error: unexpected symbol in “Started writing” Started writing inside the tick marks Text goes outside the tick marks, code goes inside the tick marks. If you want text inside the tick marks in order to comment your code, start the line with a #. Correct code # Started writing inside the tick marks Error: Error in parse(text = x, srcfile = src) : attempt to use zero-length variable name Calls: local … evaluate -&gt; parse_all -&gt; parse_all.character -&gt; parse This means you have something wrong with your tick marks around the code chunk. (In the example below the tick marks are in quotation marks so they will show. Do not use quotation marks in your markdown in this way. ) &#39;```{r}&#39; # Differet number of tick marks mean(chickwts$weight) &#39;``&#39; `` Error: Nothing happens. Code does not run. Code is outside of tick marks mean(chickwts$weight) 4.4 Other problems when knittng Error: Package inputenc Error: Unicode char This usually means you have a non-standard character in your text. It happens because you copy and pasted into the file from another document and something went wrong with the paste. The error message will tell you the character that is causing the problem. You should search your document for that character. "],
["statistics-for-multiple-variables.html", "Chapter 5 Statistics for Multiple Variables 5.1 Using formula notation 5.2 Using group_by", " Chapter 5 Statistics for Multiple Variables Most of the time we want to look at the relationship between two or more variables. R has several different ways of working with multiple variables. 5.1 Using formula notation In R a “forumula” is created using the ~ operator, which is found on the top left of the keyboard. In these examples the formula operator always works like this: dependent_variable ~ independent_variable and if you have multiple independent_variables use a + to add them on the right. Crosstab using lehmansociology lehmansociology::crosstab(tension ~ wool, data = warpbreaks) ## tension ~ wool ## A B ## L 9 9 ## M 9 9 ## H 9 9 ## Total N 27 27 Ordinary Linear Model (This means it has an interval dependent variable.) lm(raises ~ critical, data = attitude) ## ## Call: ## lm(formula = raises ~ critical, data = attitude) ## ## Coefficients: ## (Intercept) critical ## 35.025 0.396 Generalized Linear Model (In this case a logistic regression.) (in this code a dichtomous dependent variable is created using the cut() functions.) USJudgeRatings$RTEN_d &lt;- cut(USJudgeRatings$RTEN, median(USJudgeRatings$RTEN)) glm(RTEN_d ~ INTG, data = USJudgeRatings, family = binomial()) ## ## Call: glm(formula = RTEN_d ~ INTG, family = binomial(), data = USJudgeRatings) ## ## Coefficients: ## (Intercept) INTG ## -29.387 4.325 ## ## Degrees of Freedom: 42 Total (i.e. Null); 41 Residual ## Null Deviance: 26.62 ## Residual Deviance: 8.603 AIC: 12.6 Parametric t test t.test(extra ~ group, data = sleep) ## ## Welch Two Sample t-test ## ## data: extra by group ## t = -1.8608, df = 17.776, p-value = 0.07939 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.3654832 0.2054832 ## sample estimates: ## mean in group 1 mean in group 2 ## 0.75 2.33 5.2 Using group_by Another way to look at the relationship between variables is to compare values of statistics for different groups. In this case one way to do this is with the group_by function from the dplyr package. Once you group your data there are a number of other functions within dplyr and in other packages that will use the groups ro organiza the results library(magrittr) iris %&gt;% dplyr::group_by(Species) %&gt;% dplyr::summarize(mean_sepal_length = mean(Sepal.Length), median_sepal_legth = median(Sepal.Length), Upper_CI = mean(Sepal.Length) + 1.96*sd(Sepal.Length), Lower_CI = mean(Sepal.Length) - 1.96*sd(Sepal.Length) ) ## # A tibble: 3 x 5 ## Species mean_sepal_length median_sepal_legth Upper_CI Lower_CI ## &lt;fctr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 setosa 5.006 5.0 5.696880 4.315120 ## 2 versicolor 5.936 5.9 6.947695 4.924305 ## 3 virginica 6.588 6.5 7.834324 5.341676 iris %&gt;% dplyr::group_by(Species) %&gt;% skimr::skim() ## Skim summary statistics ## n obs: 150 ## n variables: 5 ## group variables: Species ## ## Variable type: numeric ## Species var missing complete n mean sd min p25 median ## 1 setosa Petal.Length 0 50 50 1.46 0.17 1 1.4 1.5 ## 2 setosa Petal.Width 0 50 50 0.25 0.11 0.1 0.2 0.2 ## 3 setosa Sepal.Length 0 50 50 5.01 0.35 4.3 4.8 5 ## 4 setosa Sepal.Width 0 50 50 3.43 0.38 2.3 3.2 3.4 ## 5 versicolor Petal.Length 0 50 50 4.26 0.47 3 4 4.35 ## 6 versicolor Petal.Width 0 50 50 1.33 0.2 1 1.2 1.3 ## 7 versicolor Sepal.Length 0 50 50 5.94 0.52 4.9 5.6 5.9 ## 8 versicolor Sepal.Width 0 50 50 2.77 0.31 2 2.52 2.8 ## 9 virginica Petal.Length 0 50 50 5.55 0.55 4.5 5.1 5.55 ## 10 virginica Petal.Width 0 50 50 2.03 0.27 1.4 1.8 2 ## 11 virginica Sepal.Length 0 50 50 6.59 0.64 4.9 6.23 6.5 ## 12 virginica Sepal.Width 0 50 50 2.97 0.32 2.2 2.8 3 ## p75 max hist ## 1 1.58 1.9 ▁▁▅▇▇▅▂▁ ## 2 0.3 0.6 ▂▇▁▂▂▁▁▁ ## 3 5.2 5.8 ▂▃▅▇▇▃▁▂ ## 4 3.68 4.4 ▁▁▃▅▇▃▂▁ ## 5 4.6 5.1 ▁▃▂▆▆▇▇▃ ## 6 1.5 1.8 ▆▃▇▅▆▂▁▁ ## 7 6.3 7 ▃▂▇▇▇▃▅▂ ## 8 3 3.4 ▁▂▃▅▃▇▃▁ ## 9 5.88 6.9 ▂▇▃▇▅▂▁▂ ## 10 2.3 2.5 ▂▁▇▃▃▆▅▃ ## 11 6.9 7.9 ▁▁▃▇▅▃▂▃ ## 12 3.18 3.8 ▁▃▇▇▅▃▁▂ "],
["graphs.html", "Chapter 6 Graphs 6.1 How ggplot works 6.2 Common problems", " Chapter 6 Graphs In our classes we primarily use the ggplot2 package for graphing. Remember htat you will need to load the package library(ggplot2). As a package is is very flexible and provides many options that will let you do just about any visualization, but this can make it seem complicated when you are starting out learning it. 6.1 How ggplot works Ggplot constructs a graph by building it up piece by piece, with the parts connected with + signs. 6.1.1 ggplot() A ggplot always starts with the ggplot() function. For beginners, the important thing to know is that this function sets up the axes for your plot. To do this you n provide the name of the data set and the name of the x variable and the y variable (if needed). Notice how the three axes below differ depending on how many variables there are and what kind of variable they are. The variable information goes inside the aes() which is short for aesthetics. library(ggplot2) ggplot(iris, aes(x = Sepal.Length)) ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) ggplot(iris, aes(x = Species, y = Sepal.Width)) 6.1.2 Adding geom To add data to the axes you use a “geom” that determines the type of display. The geom does not modify the axis, it adds data to it. To show this, let’s save the ggplot information and add to it. Our first example is only for one variable. Often, you will want to add options such as binwidth. The last example shows how to use a slightly different approach to graph the cumulative distribution (ecdf). graph1 &lt;- ggplot(iris, aes(x = Sepal.Length)) graph1 + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. graph1 + geom_dotplot(binwidth = .1) graph1 + geom_bar() graph1 + geom_density() graph1 + stat_ecdf(geom = &quot;step&quot;) Our second example uses two interval variables, so has different possibilities than the first. The second one shows one way that geoms can be combined. graph2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) graph2 + geom_point() graph2 + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; graph2_with_species &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point() graph2_with_species This data includes two types of data. The last example shows how multiple geoms can be combined. graph3 &lt;- ggplot(iris, aes(x = Species, y = Sepal.Width)) graph3 + geom_point() graph3 + geom_count() graph3 + geom_jitter() graph3 + geom_boxplot() graph3 + geom_boxplot() + geom_jitter() 6.1.3 Add titles and labels, modify axes There are many additional options that you can use. This document will just show how to add a title and labels and modify axes. graph3 + geom_jitter() + ggtitle(&quot;Sepal Width by Species in the Iris Data&quot;) + labs(y=&quot;Sepal Width&quot;, x=&quot;Iris Species&quot;) The way to modify axes is to use scale_y_continuous and scale_x_continuous. These are very flexible and have many options. This section will show how to change or improve some of the previous plots. # Remove irrelevant y axis values graph1 + geom_dotplot(binwidth = .1) + scale_y_continuous(NULL, breaks = NULL) # Use the same tick marks on the x axis match those on the y axis graph2 + geom_point() + scale_x_continuous( breaks = seq(4, 8, .5), minor_breaks = waiver()) There are several websites that give detailed examples of more complex ways to create visualizations. 6.2 Common problems Some of the most common problems in ggplot are the same as any other code in R, misspelling names, using the wrong graph for your data type, or having a problem with your tick marks. Here are some errors that you are most likely to see when using ggplot. 6.2.1 unexpected symbol This happens when you forget to put a + between the different parts of your plot. graph3 geom_jitter() Error: unexpected symbol in &quot;graph3 geom_jitter&quot; 6.2.2 invalid argument to unary operator This happens if you have an extra +. graph3 + + geom_jitter() Error in +geom_jitter() : invalid argument to unary operator 6.2.3 Error: unexpected ‘)’ This happens if you have an extra closing parenthesis. graph2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width))) Error: unexpected &#39;)&#39; in &quot;graph2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)))&quot; "],
["other.html", "Chapter 7 Other", " Chapter 7 Other This chapter will have additional material. "]
]
